import pandas as pd
from sklearn import ensemble
import numpy as np
from scipy.stats import mode
from sklearn import preprocessing,model_selection
from sklearn.preprocessing import LabelEncoder
import csv
from itertools import zip_longest

from xgboost import XGBClassifier
def filter_data(path):
    df=pd.read_csv(path)
    # department_names=df["department"].tolist()
    df['education'].fillna(mode(list(df['education'])).mode[0], inplace=True)
    df['previous_year_rating'].fillna(int(df['previous_year_rating'].mean()), inplace=True)
    df['previous_year_rating']=df['previous_year_rating'].astype(int)
    department_names=df["department"].tolist()
    var_mod = ['department',"education","gender"]
    label_encoder_obejct = LabelEncoder()
    for i in var_mod:
        label_encoder_obejct.fit(list(df[i].values))
        df[i] = label_encoder_obejct.transform(list(df[i]))

    return df

def train_model():
    df = filter_data(path="train_LZdllcl.csv")
    x=['department','education','gender','no_of_trainings','age','previous_year_rating','length_of_service','KPIs_met >80%','awards_won?',"avg_training_score"]
    y=['is_promoted']
    X_train,X_test,y_train,y_test=model_selection.train_test_split(df[x],df[y],test_size=0.2, random_state=42)
    # clf=ensemble.RandomForestClassifier(n_estimators=200,max_features=3,min_samples_split=5,oob_score=True,n_jobs=-1,criterion='entropy')
    model = XGBClassifier(learning_rate =0.1, n_estimators=100, max_depth=5, min_child_weight=1, gamma=0, subsample=0.8, colsample_bytree=0.8, objective= 'binary:logistic', nthread=4, scale_pos_weight=1, seed=27)

    model.fit(X_train,y_train)
    accuracy=model.score(X_test,y_test)
    print(accuracy)

    prediction = model.predict(X_train)
    id=df['is_promoted'].tolist()

    final_list_toCSV = [prediction,id]
    export_data = zip_longest(*final_list_toCSV, fillvalue='')
    with open('wns.csv', 'w', encoding='utf-8', newline='') as myfile:
        wr = csv.writer(myfile)
        wr.writerow(("prediction","id"))
        wr.writerows(export_data)
    myfile.close()



train_model()

